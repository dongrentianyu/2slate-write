title: $:/plugins/linonetwo/slate-write/develop
type: text/vnd.tiddlywiki

!! How this works

# Offer an widget in `src/widget.js` and `src/components/index.ts`, where we provide props like `currentTiddler` to the actual react component in `src/components/editor.tsx`
## Some basic mark and elements like ''bold'' and ordered list are supported by slate plugins imported from `src/config/plugins.ts`
## render advanced tiddlywiki widgets using [[tw-react|https://github.com/tiddly-gittly/tw-react]]'s `useWidget` hook, in our own plugin `src/config/plugins/widget/WidgetBlock.tsx`
### Things like widget, macro and codeblock are [[Void Node|https://docs.slatejs.org/api/nodes/element#void-vs-not-void]], slate won't render its AST children, we have full control
### replace codeblock with codemirror or monaco, so plate's default prism code syntax highlighter won't need to be bundled with our plugin, it is too big
# Transform AST to Slate JSON using transformers in src/transform, see `src/transform/README.md` for details. This also transform Slate JSON back to the wikiast and then serialize to wikitext.
## we add some type of wikiast to [[tw5-typed|https://github.com/tiddly-gittly/TW5-Typed]], based on the real json output of `$tw.wiki.parseText('text/vnd.tiddlywiki', input).tree`
## This is imported in editor by `import { deserialize, serialize } from '../../src/transform/serialize';`, and those serialize and deserialize functions uses things in the `src/transform`
## All supported wikitext syntax are tested in the `test` folder of [[wikiast|https://github.com/tiddly-gittly/wikiast]], and the tests are run with `npm run test` on that repo, you should also add test if you are adding new transformers for new syntax in that repo.
# handle keyboard shortcut and basic elements' rendering using slatejs plugins from [[Udecode's Plate framework|https://platejs.org/]].
## Code in `src/slate-write/editor/components/plate-ui` are generated by plate cli, see `src/slate-write/editor/components/plate-ui/Readme.md` for details
## our custom keyboard shortcuts are configured in `src/editor/config/autoformat`
## re-support `/` menu in [[Gk0Wk/TW5-CodeMirror-Enhanced|https://github.com/Gk0Wk/TW5-CodeMirror-Enhanced]] to add snippets and advanced elements like table and widget and any wikitext source code
### `/` menu component is at `src/editor/components/combobox/SnippetCombobox.tsx`, and snippets are loaded in `src/editor/config/snippets.ts`
# There will be a floating toolbar when you selecting text, and you can click on the toolbar to change the text's decoration, this is a react component defined in `src/slate-write/editor/components/Toolbars.tsx`
# When hover on the left of a block, there will be a Drag and drop handle, render by `src/slate-write/editor/config/draggableComponents.ts` and `src/slate-write/editor/components/plate-ui/draggable.tsx`
## Different block have different line height, so we need to add different padding here to align drag handle with the block.
## allow drag to reorder blocks, onDrop listeners are in `src/editor/plugins/dnd/hooks` that copied from plate's source
### code are copy from udecode/plate's repo to `src/editor/plugins/dnd` folder, and have modification in `src/editor/plugins/dnd/hooks/useDragBlock.ts` to set `$tw.dragInProgress = true`
## support drag to reorder list items and widget, see `src/slate-write/editor/plugins/dnd/postDropNormalize.ts` for how we fix dragged list item, by wrapping it with a `ol` or `ul` parent on drop.
# autocomplete `[[`'s and `{{`'s linkable tiddlers result
## the code handles special `auto_complete_input` node that contains text to search after typing `/` or `[[` is copied from plate to `src/editor/plugins/autoComplete`
## `src/editor/plugins/autoComplete/withAutoComplete.ts` will put text in the `auto_complete_input` node to the redux (zustand npm package) store `useAutoCompletePluginStore`
## code in `src/editor/plugins/comboBox` will get text and list from the store `useAutoCompletePluginStore`, and handles dropdown (combobox) interaction using `downshift` npm package
## And the final comboBox React component and the data source of tiddlers/macros/snippets are in the `src/editor/components/combobox` folder
## autocomplete `<<`'s available macros as discussed in [[TiddlyWiki5/discussions/6706|https://github.com/Jermolene/TiddlyWiki5/discussions/6706]]
## autocomplete `<$`'s available widget and fields, see `src/editor/components/combobox/WidgetCombobox.tsx`, in `widgetItems`, text field is the text that will be inserted, this logic is at `src/editor/plugins/comboBox/getAutoCompleteOnSelectItem.ts`
# Only import needed components from their ''deepest package'' to achieve "tree shaking" to reduce bundle size
## e.g., `import { PlateElement, PlateElementProps } from '@udecode/plate-utils';` instead of `import { PlateElement, PlateElementProps } from '@udecode/plate-common';` where `@udecode/plate-common` is much larger.
## Some element from plate are not needed, like ImageElement can be replaced by tw's own image widget, so don't import it. And for code-block, we use our own codemirror based element located in `src/editor/plugins/codeblock/CodeBlockElement/CodeBlockElement.tsx`

!! TODO

# TODO: allow editing widget and any block's source code, and get preview at real time.
# TODO: allow use tw's default editor toolbar's buttons and their keyboard shortcuts
# TODO: optimization: use section splitter in section-editor to ensure only a small potion of text will `onChange` and rerender. And we can get start-end of section from section splitter, so replace the section of text onChange.
# TODO: allow drag images in and import the image
# TODO: context menu when click on the drag handle
# TODO: context menu when select special block
# TODO: i18n for readme and placeholder
# TODO: allow 3rd party plugin to control the editor, for example, the command palette and the fishing plugin.
# TODO: add more selection operation, or maybe in command palette, like "refactor to new tiddler"
# TODO: insert latex math using `$$` or `￥￥` shortcut
# TODO: open context aware autocomplete using `ctrl+space`, show corresponding dropdown menu using prefix of the selection
# TODO: add tldraw widget support

!! Development

Install and run

(See [[https://npmmirror.com/]] for how to speed up in China)

```sh
pnpm i
pnpm run dev
```

Run tests

```sh
npm test
```

Auto generate barrel files (index.ts files).

```sh
npm run generate-barrels
```

Make production build: See `.github/workflows/release.yml`, so adding a tag like `v0.1.1` to a commit and push to github will make a build.

!!! Modify build scripts

Scripts is based on [[Gk0Wk's|https://github.com/Gk0Wk]] [[tiddly-gittly/Modern.TiddlyDev|https://github.com/tiddly-gittly/Modern.TiddlyDev]] and [[LinOnetwo's|https://github.com/linonetwo]] [[tiddly-gittly/TiddlyWiki-TS-Plugin-Template|https://github.com/tiddly-gittly/TiddlyWiki-TS-Plugin-Template]]. With some modification to adapt react dom.
